<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/10/16/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><ul>
<li><a href="http://nodejs.cn/">Node.js</a></li>
<li><a href="https://git-scm.com/download/">Git</a></li>
</ul>
<h3 id="2-安装hexo环境"><a href="#2-安装hexo环境" class="headerlink" title="2.安装hexo环境"></a>2.安装hexo环境</h3><p> <strong>Node.js</strong>安装完成后的检验操作是在cmd窗口下输入命令 <code>node -v</code>和<code>npm -v</code>这两个命令就是查看版本信息的。如下图所示:</p>
<p><img src="/images/2020101601.png"></p>
<p> <strong>Git</strong>安装完成后的检验操作是：鼠标右键 效果如下图所示:</p>
<p><img src="/images/2020101602.png"></p>
<h3 id="3-安装hexo基本框架"><a href="#3-安装hexo基本框架" class="headerlink" title="3.安装hexo基本框架"></a>3.安装hexo基本框架</h3><blockquote>
<p>第一步：新建文件</p>
</blockquote>
<p>找一个合适的位置新建一个空的文件夹，进入该文件夹中，再点击右键点击”Git Bash Here”</p>
<p><img src="/images/2020101603.png"></p>
<blockquote>
<p>第二步：安装hexo基础框架</p>
</blockquote>
<p>第一步完成后，会出现一个命名窗口。输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;第一条   安装cnpm并将镜像源指向国内的淘宝</span><br><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二条 安装hexo博客</span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第三条   这是初始化hexo框架 这个可能会比较慢</span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第五条 启动本地服务</span><br><span class="line">hexo s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第五条命名完成后，可以首次体验一下，如下图：</p>
<p><img src="/images/2020101604.png"></p>
<p>浏览器中的效果如下：</p>
<p><img src="/images/2020101605.png"></p>
<h3 id="4-将hexo生成的个人博客发布到Github上"><a href="#4-将hexo生成的个人博客发布到Github上" class="headerlink" title="4.将hexo生成的个人博客发布到Github上"></a>4.将hexo生成的个人博客发布到Github上</h3><blockquote>
<p>第一步：安装 hexo-deployer-git</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第二步:修改根目录下_config.yml配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #https:&#x2F;&#x2F;bitbucket.org&#x2F;JohnSmith&#x2F;johnsmith.bitbucket.io</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left"><strong>参数</strong></th>
<th><strong>描述</strong></th>
<th>默认</th>
</tr>
</thead>
<tbody><tr>
<td align="left">repo</td>
<td>库（Repository）地址</td>
<td></td>
</tr>
<tr>
<td align="left">branch</td>
<td>分支名称</td>
<td><code>gh-pages</code> (GitHub)<br/><code>coding-pages</code> (Coding.net)<br/><code>master</code> (others)</td>
</tr>
<tr>
<td align="left">message</td>
<td>自定义提交信息</td>
<td><code>Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code>)</td>
</tr>
<tr>
<td align="left">token</td>
<td>Optional token value to authenticate with the repo. Prefix with <code>$</code> to read token from environment variable</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>第三步：配置Git</p>
</blockquote>
<p>1.设置用户名称和登录邮箱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name&#39;用户名称&#39;</span><br><span class="line">$ git config --global user.email&#39;登录邮箱&#39;</span><br></pre></td></tr></table></figure>

</br>

<p>2.生成密匙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &#39;登录邮箱&#39;</span><br></pre></td></tr></table></figure>

<p>上述代码执行完成后，会连续多次输入密码。<span style="color:red;font-size:20px;">注意：</span>此时不要输入密码。</p>
<p><strong>密匙生成后会给出一个.ssh文件的地址，通过该地址找到该文件打开，复制里面的ssh key用于第三步</strong></p>
</br>

<p>3.配置Github网站</p>
<p>1):新建一个仓库</p>
<p>具体步骤自行百度。</p>
<p><span style="color:red;font-size:20px;">注意：</span>仓库名字必须以”<strong>github账号名.github.io</strong>“的格式进行命名，因为这样我们可以直接通过该用户名进行后面的访问。</p>
<p>2):添加ssh keys</p>
<p>登录你的github账号后，点击右上角的：头像➡settings➡SSH and GPG keys</p>
<p><img src="/images/2020101606.png"></p>
<p>然后点击：new SSH key </p>
<p><img src="/images/2020101607.png"></p>
<p>title可自行填写；</p>
<p>将第二步复制的文本粘贴到Key中，然后点击Add SSH key；</p>
<blockquote>
<p>第三步：将个人博客发布到github上</p>
</blockquote>
<p>在个人博客的根目录中点击：右键➡Git Bash Here，然后输入以下代码将个人博客上传到github上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean    &#x2F;&#x2F;清除缓存</span><br><span class="line">$ hexo g	    &#x2F;&#x2F;生成网站静态文件到默认设置的 public 文件夹</span><br><span class="line">$ hexo d		&#x2F;&#x2F;上传public文件到github上</span><br></pre></td></tr></table></figure>

<p>完成配置。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery</title>
    <url>/2020/10/20/jQuery/</url>
    <content><![CDATA[</br>

<h3 id="1-什么是JQuery"><a href="#1-什么是JQuery" class="headerlink" title="1.什么是JQuery"></a>1.什么是JQuery</h3><p>jQuery，顾名思义，也就是 JavaScript 和查询（Query），它就是辅助 JavaScript 开发的 js 类库。</p>
</br>

<h3 id="2-JQuery的引用"><a href="#2-JQuery的引用" class="headerlink" title="2.JQuery的引用"></a>2.JQuery的引用</h3><script type="text/javascript" src="JQuery地址"></script>

</br>

<h3 id="3-jQuery-核心函数"><a href="#3-jQuery-核心函数" class="headerlink" title="3.jQuery 核心函数"></a>3.jQuery 核心函数</h3><p> $ 是 jQuery 的核心函数，能完成 jQuery 的很多功能。$()就是调用$这个函数</p>
<p>1、传入参数为 [ 函数 ] 时：</p>
<blockquote>
<p> 表示页面加载完成之后。相当于 window.onload = function(){} </p>
</blockquote>
<p>2、传入参数为 [ HTML 字符串 ] 时：</p>
<blockquote>
<p> 会对我们创建这个 html 标签对象 </p>
</blockquote>
<p>3、传入参数为 [ 选择器字符串 ] 时：</p>
<blockquote>
<p> $(“#id 属性值”); id 选择器，根据 id 查询标签对象 $(“标签名”); 标签名选择器，根据指定的标签名查询标签对象 ​$(“.class 属性值”); 类型选择器，可以根据 class 属性查询标签对象</p>
</blockquote>
<p> 4、传入参数为 [ DOM 对象 ] 时：</p>
<blockquote>
<p> 会把这个 dom 对象转换为 jQuery 对象</p>
</blockquote>
<h3 id="4-jQuery-对象和-dom-对象区分"><a href="#4-jQuery-对象和-dom-对象区分" class="headerlink" title="4.jQuery 对象和 dom 对象区分"></a>4.jQuery 对象和 dom 对象区分</h3><h4 id="4-1Dom-对象"><a href="#4-1Dom-对象" class="headerlink" title="4.1Dom 对象"></a>4.1Dom 对象</h4><blockquote>
<p>1.通过 getElementById()查询出来的标签对象是 Dom 对象</p>
<p>2.通过 getElementsByName()查询出来的标签对象是 Dom 对象 </p>
<p>3.通过 getElementsByTagName()查询出来的标签对象是 Dom 对象</p>
<p>4.通过 createElement() 方法创建的对象，是 Dom 对象</p>
</blockquote>
<p><strong>DOM 对象 Alert 出来的效果是：</strong>[object HTML 标签名 Element]</p>
<h4 id="4-2jQuery-对象"><a href="#4-2jQuery-对象" class="headerlink" title="4.2jQuery 对象"></a>4.2jQuery 对象</h4><blockquote>
<p>1.通过 JQuery 提供的 API 创建的对象，是 JQuery 对象</p>
<p>2.通过 JQuery 包装的 Dom 对象，也是 JQuery 对象 </p>
<p>3.通过 JQuery 提供的 API 查询到的对象，是 JQuery 对象</p>
</blockquote>
<p><strong>jQuery 对象 Alert 出来的效果是：</strong>[object Object]</p>
<p>本质：jQuery 对象是 dom 对象的数组 + jQuery 提供的一系列功能函数。</p>
<h4 id="4-3Dom-对象和-jQuery-对象互转"><a href="#4-3Dom-对象和-jQuery-对象互转" class="headerlink" title="4.3Dom 对象和 jQuery 对象互转"></a>4.3Dom 对象和 jQuery 对象互转</h4><p><span style="color:red;font-size:20px;">1、dom 对象转化为 jQuery 对象（*重点）</span></p>
<p>​     1、先有 DOM 对象</p>
<p>​     2、$( DOM 对象 ) 就可以转换成为 jQuery 对象</p>
<p><span style="color:red;font-size=20px">2、jQuery 对象转为 dom 对象（*重点）</span></p>
<p>​     1、先有 jQuery 对象</p>
<p>​     2、jQuery 对象[下标]取出相应的 DOM 对象</p>
</br>

<h3 id="5-JQuery选择器"><a href="#5-JQuery选择器" class="headerlink" title="5.JQuery选择器"></a>5.JQuery选择器</h3><h4 id="5-1基本选择器"><a href="#5-1基本选择器" class="headerlink" title="5.1基本选择器"></a>5.1基本选择器</h4><p>#ID 选择器：</p>
<blockquote>
<p>根据 id 查找标签对象 </p>
</blockquote>
<p>.class 选择器：</p>
<blockquote>
<p>根据 class 查找标签对象 </p>
</blockquote>
<p>element 选择器：</p>
<blockquote>
<p>根据标签名查找标签对象</p>
</blockquote>
<p>*选择器：</p>
<blockquote>
<p> 表示任意的，所有的元素 </p>
</blockquote>
<p>selector1，selector2 组合选择器：</p>
<blockquote>
<p>合并选择器 1，选择器 2 的结果并返回</p>
</blockquote>
<h4 id="5-2层级选择器（-重点）"><a href="#5-2层级选择器（-重点）" class="headerlink" title="5.2层级选择器（****重点）"></a>5.2层级选择器（****重点）</h4><p>ancestor descendant</p>
<blockquote>
<p> 后代选择器 ：在给定的祖先元素下匹配所有的后代元素 </p>
</blockquote>
<p>parent &gt; child</p>
<blockquote>
<p> 子元素选择器：在给定的父元素下匹配所有的子元素 </p>
</blockquote>
<p>prev + next </p>
<blockquote>
<p>相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素 </p>
</blockquote>
<p>prev ~ sibings</p>
<blockquote>
<p> 兄弟元素选择器：匹配 prev 元素之后的所有 siblings 元素</p>
</blockquote>
<h4 id="5-3过滤选择器"><a href="#5-3过滤选择器" class="headerlink" title="5.3过滤选择器"></a>5.3过滤选择器</h4><h5 id="基本过滤器："><a href="#基本过滤器：" class="headerlink" title="基本过滤器："></a>基本过滤器：</h5><p>:first </p>
<blockquote>
<p>获取第一个元素 </p>
</blockquote>
<p>:last</p>
<blockquote>
<p>获取最后个元素 </p>
</blockquote>
<p>:not(selector) </p>
<blockquote>
<p>去除所有与给定选择器匹配的元素 </p>
</blockquote>
<p>:even</p>
<blockquote>
<p> 匹配所有索引值为偶数的元素，从 0 开始计数 </p>
</blockquote>
<p>:odd </p>
<blockquote>
<p>匹配所有索引值为奇数的元素，从 0 开始计数 </p>
</blockquote>
<p>:eq(index)</p>
<blockquote>
<p> 匹配一个给定索引值的元素 </p>
</blockquote>
<p>:gt(index)</p>
<blockquote>
<p> 匹配所有大于给定索引值的元素 </p>
</blockquote>
<p>:lt(index)</p>
<blockquote>
<p> 匹配所有小于给定索引值的元素 </p>
</blockquote>
<p>:header</p>
<blockquote>
<p> 匹配如 h1, h2, h3 之类的标题元素 </p>
</blockquote>
<p>:animated</p>
<blockquote>
<p> 匹配所有正在执行动画效果的元素</p>
</blockquote>
<h5 id="内容过滤器："><a href="#内容过滤器：" class="headerlink" title="内容过滤器："></a>内容过滤器：</h5><p>:contains(text) </p>
<blockquote>
<p>匹配包含给定文本的元素 </p>
</blockquote>
<p>:empty </p>
<blockquote>
<p>匹配所有不包含子元素或者文本的空元素</p>
</blockquote>
<p>:parent </p>
<blockquote>
<p>匹配含有子元素或者文本的元素</p>
</blockquote>
<p>:has(selector) </p>
<blockquote>
<p>匹配含有选择器所匹配的元素的元素</p>
</blockquote>
<h5 id="属性过滤器："><a href="#属性过滤器：" class="headerlink" title="属性过滤器："></a>属性过滤器：</h5><p>[attribute] </p>
<blockquote>
<p>匹配包含给定属性的元素。 </p>
</blockquote>
<p>[attribute=value] </p>
<blockquote>
<p>匹配给定的属性是某个特定值的元素 </p>
</blockquote>
<p>[attribute!=value] </p>
<blockquote>
<p>匹配所有不含有指定的属性，或者属性不等于特定值的元素。 </p>
</blockquote>
<p>[attribute^=value] </p>
<blockquote>
<p>匹配给定的属性是以某些值开始的元素 </p>
</blockquote>
<p>[attribute$=value] </p>
<blockquote>
<p>匹配给定的属性是以某些值结尾的元素 </p>
</blockquote>
<p>[attribute*=value] </p>
<blockquote>
<p>匹配给定的属性是以包含某些值的元素 </p>
</blockquote>
<p>[attrSel1][attrSel2][attrSelN] </p>
<blockquote>
<p>复合属性选择器，需要同时满足多个条件时使用。</p>
</blockquote>
<h5 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器:"></a>表单过滤器:</h5><p>:input </p>
<blockquote>
<p>匹配所有 input, textarea, select 和 button 元素 </p>
</blockquote>
<p>:text </p>
<blockquote>
<p>匹配所有 文本输入框 :password 匹配所有的密码输入框 </p>
</blockquote>
<p>:password </p>
<blockquote>
<p>匹配所有的密码输入框 </p>
</blockquote>
<p>:radio </p>
<blockquote>
<p>匹配所有的单选框 </p>
</blockquote>
<p>:checkbox </p>
<blockquote>
<p>匹配所有的复选框</p>
</blockquote>
<p>:radio </p>
<blockquote>
<p>匹配所有的单选框 :checkbox 匹配所有的复选框 </p>
</blockquote>
<p>:submit </p>
<blockquote>
<p>匹配所有提交按钮 :image 匹配所有 img 标签 </p>
</blockquote>
<p>:image </p>
<blockquote>
<p>匹配所有 img 标签</p>
</blockquote>
<p>:reset </p>
<blockquote>
<p>匹配所有重置按钮 :button 匹配所有 input type=button 按钮 </p>
</blockquote>
<p>:file </p>
<blockquote>
<p>匹配所有 input type=file 文件上传 </p>
</blockquote>
<p>:hidden </p>
<blockquote>
<p>匹配所有不可见元素 display:none 或 input type=hidden</p>
</blockquote>
<h5 id="表单对象属性过滤器："><a href="#表单对象属性过滤器：" class="headerlink" title="表单对象属性过滤器："></a>表单对象属性过滤器：</h5><p>:enabled </p>
<blockquote>
<p>匹配所有可用元素 </p>
</blockquote>
<p>:disabled </p>
<blockquote>
<p>匹配所有不可用元素 </p>
</blockquote>
<p>:checked </p>
<blockquote>
<p>匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象 </p>
</blockquote>
<p>:selected </p>
<blockquote>
<p>匹配所有选中的 option</p>
</blockquote>
<h3 id="6-元素的筛选"><a href="#6-元素的筛选" class="headerlink" title="6.元素的筛选"></a>6.元素的筛选</h3><p>eq() 获取给定索引的元素 功能跟 :eq() 一样 </p>
<p>first() 获取第一个元素 功能跟 :first 一样 </p>
<p>last() 获取最后一个元素 功能跟 :last 一样 </p>
<p>filter(exp) 留下匹配的元素 </p>
<p>is(exp) 判断是否匹配给定的选择器，只要有一个匹配就返回，true </p>
<p>has(exp) 返回包含有匹配选择器的元素的元素 功能跟 :has 一样 </p>
<p>not(exp) 删除匹配选择器的元素 功能跟 :not 一样 </p>
<p>children(exp) 返回匹配给定选择器的子元素 功能跟 parent&gt;child 一样 </p>
<p>find(exp) 返回匹配给定选择器的后代元素 功能跟 ancestor descendant 一样</p>
<p>next() 返回当前元素的下一个兄弟元素 功能跟 prev + next 功能一样 </p>
<p>nextAll() 返回当前元素后面所有的兄弟元素 功能跟 prev ~ siblings 功能一样 </p>
<p>nextUntil() 返回当前元素到指定匹配的元素为止的后面元素 </p>
<p>parent() 返回父元素 </p>
<p>prev(exp) 返回当前元素的上一个兄弟元素 </p>
<p>prevAll() 返回当前元素前面所有的兄弟元素 </p>
<p>prevUnit(exp) 返回当前元素到指定匹配的元素为止的前面元素 </p>
<p>siblings(exp) 返回所有兄弟元素 </p>
<p>add() 把 add 匹配的选择器的元素添加到当前 jquery 对象中</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/10/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
